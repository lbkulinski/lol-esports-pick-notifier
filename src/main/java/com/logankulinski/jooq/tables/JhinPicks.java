/*
 * This file is generated by jOOQ.
 */
package com.logankulinski.jooq.tables;


import com.logankulinski.jooq.EsportsData;
import com.logankulinski.jooq.Keys;
import com.logankulinski.jooq.tables.records.JhinPicksRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JhinPicks extends TableImpl<JhinPicksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>esports_data.jhin_picks</code>
     */
    public static final JhinPicks JHIN_PICKS = new JhinPicks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JhinPicksRecord> getRecordType() {
        return JhinPicksRecord.class;
    }

    /**
     * The column <code>esports_data.jhin_picks.game_id</code>.
     */
    public final TableField<JhinPicksRecord, String> GAME_ID = createField(DSL.name("game_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>esports_data.jhin_picks.message_id</code>.
     */
    public final TableField<JhinPicksRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>esports_data.jhin_picks.player</code>.
     */
    public final TableField<JhinPicksRecord, String> PLAYER = createField(DSL.name("player"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>esports_data.jhin_picks.tournament</code>.
     */
    public final TableField<JhinPicksRecord, String> TOURNAMENT = createField(DSL.name("tournament"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>esports_data.jhin_picks.won</code>.
     */
    public final TableField<JhinPicksRecord, Boolean> WON = createField(DSL.name("won"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>esports_data.jhin_picks.timestamp</code>.
     */
    public final TableField<JhinPicksRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>esports_data.jhin_picks.vod</code>.
     */
    public final TableField<JhinPicksRecord, String> VOD = createField(DSL.name("vod"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>esports_data.jhin_picks.notified</code>.
     */
    public final TableField<JhinPicksRecord, Boolean> NOTIFIED = createField(DSL.name("notified"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private JhinPicks(Name alias, Table<JhinPicksRecord> aliased) {
        this(alias, aliased, null);
    }

    private JhinPicks(Name alias, Table<JhinPicksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>esports_data.jhin_picks</code> table reference
     */
    public JhinPicks(String alias) {
        this(DSL.name(alias), JHIN_PICKS);
    }

    /**
     * Create an aliased <code>esports_data.jhin_picks</code> table reference
     */
    public JhinPicks(Name alias) {
        this(alias, JHIN_PICKS);
    }

    /**
     * Create a <code>esports_data.jhin_picks</code> table reference
     */
    public JhinPicks() {
        this(DSL.name("jhin_picks"), null);
    }

    public <O extends Record> JhinPicks(Table<O> child, ForeignKey<O, JhinPicksRecord> key) {
        super(child, key, JHIN_PICKS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : EsportsData.ESPORTS_DATA;
    }

    @Override
    public UniqueKey<JhinPicksRecord> getPrimaryKey() {
        return Keys.KEY_JHIN_PICKS_PRIMARY;
    }

    @Override
    public JhinPicks as(String alias) {
        return new JhinPicks(DSL.name(alias), this);
    }

    @Override
    public JhinPicks as(Name alias) {
        return new JhinPicks(alias, this);
    }

    @Override
    public JhinPicks as(Table<?> alias) {
        return new JhinPicks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JhinPicks rename(String name) {
        return new JhinPicks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JhinPicks rename(Name name) {
        return new JhinPicks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JhinPicks rename(Table<?> name) {
        return new JhinPicks(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Boolean, LocalDateTime, String, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super LocalDateTime, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
