/*
 * This file is generated by jOOQ.
 */
package com.logankulinski.jooq.tables;


import com.logankulinski.jooq.Keys;
import com.logankulinski.jooq.Public;
import com.logankulinski.jooq.tables.records.EsportsPickRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EsportsPick extends TableImpl<EsportsPickRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.esports_pick</code>
     */
    public static final EsportsPick ESPORTS_PICK = new EsportsPick();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EsportsPickRecord> getRecordType() {
        return EsportsPickRecord.class;
    }

    /**
     * The column <code>public.esports_pick.game_id</code>.
     */
    public final TableField<EsportsPickRecord, String> GAME_ID = createField(DSL.name("game_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.esports_pick.message_id</code>.
     */
    public final TableField<EsportsPickRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.esports_pick.champion</code>.
     */
    public final TableField<EsportsPickRecord, String> CHAMPION = createField(DSL.name("champion"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.esports_pick.player</code>.
     */
    public final TableField<EsportsPickRecord, String> PLAYER = createField(DSL.name("player"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.esports_pick.tournament</code>.
     */
    public final TableField<EsportsPickRecord, String> TOURNAMENT = createField(DSL.name("tournament"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.esports_pick.won</code>.
     */
    public final TableField<EsportsPickRecord, Boolean> WON = createField(DSL.name("won"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.esports_pick.timestamp</code>.
     */
    public final TableField<EsportsPickRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.esports_pick.vod</code>.
     */
    public final TableField<EsportsPickRecord, String> VOD = createField(DSL.name("vod"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.esports_pick.notified</code>.
     */
    public final TableField<EsportsPickRecord, Boolean> NOTIFIED = createField(DSL.name("notified"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private EsportsPick(Name alias, Table<EsportsPickRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EsportsPick(Name alias, Table<EsportsPickRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.esports_pick</code> table reference
     */
    public EsportsPick(String alias) {
        this(DSL.name(alias), ESPORTS_PICK);
    }

    /**
     * Create an aliased <code>public.esports_pick</code> table reference
     */
    public EsportsPick(Name alias) {
        this(alias, ESPORTS_PICK);
    }

    /**
     * Create a <code>public.esports_pick</code> table reference
     */
    public EsportsPick() {
        this(DSL.name("esports_pick"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<EsportsPickRecord> getPrimaryKey() {
        return Keys.LOL_ESPORTS_PICK_PKEY;
    }

    @Override
    public EsportsPick as(String alias) {
        return new EsportsPick(DSL.name(alias), this);
    }

    @Override
    public EsportsPick as(Name alias) {
        return new EsportsPick(alias, this);
    }

    @Override
    public EsportsPick as(Table<?> alias) {
        return new EsportsPick(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EsportsPick rename(String name) {
        return new EsportsPick(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EsportsPick rename(Name name) {
        return new EsportsPick(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EsportsPick rename(Table<?> name) {
        return new EsportsPick(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EsportsPick where(Condition condition) {
        return new EsportsPick(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EsportsPick where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EsportsPick where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EsportsPick where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EsportsPick where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EsportsPick where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EsportsPick where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EsportsPick where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EsportsPick whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EsportsPick whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
