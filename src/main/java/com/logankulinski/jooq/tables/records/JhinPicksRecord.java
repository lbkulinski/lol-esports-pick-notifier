/*
 * This file is generated by jOOQ.
 */
package com.logankulinski.jooq.tables.records;


import com.logankulinski.jooq.tables.JhinPicks;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JhinPicksRecord extends UpdatableRecordImpl<JhinPicksRecord> implements Record8<String, String, String, String, Boolean, LocalDateTime, String, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>esports_data.jhin_picks.game_id</code>.
     */
    public void setGameId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.game_id</code>.
     */
    public String getGameId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.message_id</code>.
     */
    public void setMessageId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.message_id</code>.
     */
    public String getMessageId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.player</code>.
     */
    public void setPlayer(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.player</code>.
     */
    public String getPlayer() {
        return (String) get(2);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.tournament</code>.
     */
    public void setTournament(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.tournament</code>.
     */
    public String getTournament() {
        return (String) get(3);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.won</code>.
     */
    public void setWon(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.won</code>.
     */
    public Boolean getWon() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.timestamp</code>.
     */
    public void setTimestamp(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.vod</code>.
     */
    public void setVod(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.vod</code>.
     */
    public String getVod() {
        return (String) get(6);
    }

    /**
     * Setter for <code>esports_data.jhin_picks.notified</code>.
     */
    public void setNotified(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>esports_data.jhin_picks.notified</code>.
     */
    public Boolean getNotified() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Boolean, LocalDateTime, String, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String, String, String, String, Boolean, LocalDateTime, String, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return JhinPicks.JHIN_PICKS.GAME_ID;
    }

    @Override
    public Field<String> field2() {
        return JhinPicks.JHIN_PICKS.MESSAGE_ID;
    }

    @Override
    public Field<String> field3() {
        return JhinPicks.JHIN_PICKS.PLAYER;
    }

    @Override
    public Field<String> field4() {
        return JhinPicks.JHIN_PICKS.TOURNAMENT;
    }

    @Override
    public Field<Boolean> field5() {
        return JhinPicks.JHIN_PICKS.WON;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return JhinPicks.JHIN_PICKS.TIMESTAMP;
    }

    @Override
    public Field<String> field7() {
        return JhinPicks.JHIN_PICKS.VOD;
    }

    @Override
    public Field<Boolean> field8() {
        return JhinPicks.JHIN_PICKS.NOTIFIED;
    }

    @Override
    public String component1() {
        return getGameId();
    }

    @Override
    public String component2() {
        return getMessageId();
    }

    @Override
    public String component3() {
        return getPlayer();
    }

    @Override
    public String component4() {
        return getTournament();
    }

    @Override
    public Boolean component5() {
        return getWon();
    }

    @Override
    public LocalDateTime component6() {
        return getTimestamp();
    }

    @Override
    public String component7() {
        return getVod();
    }

    @Override
    public Boolean component8() {
        return getNotified();
    }

    @Override
    public String value1() {
        return getGameId();
    }

    @Override
    public String value2() {
        return getMessageId();
    }

    @Override
    public String value3() {
        return getPlayer();
    }

    @Override
    public String value4() {
        return getTournament();
    }

    @Override
    public Boolean value5() {
        return getWon();
    }

    @Override
    public LocalDateTime value6() {
        return getTimestamp();
    }

    @Override
    public String value7() {
        return getVod();
    }

    @Override
    public Boolean value8() {
        return getNotified();
    }

    @Override
    public JhinPicksRecord value1(String value) {
        setGameId(value);
        return this;
    }

    @Override
    public JhinPicksRecord value2(String value) {
        setMessageId(value);
        return this;
    }

    @Override
    public JhinPicksRecord value3(String value) {
        setPlayer(value);
        return this;
    }

    @Override
    public JhinPicksRecord value4(String value) {
        setTournament(value);
        return this;
    }

    @Override
    public JhinPicksRecord value5(Boolean value) {
        setWon(value);
        return this;
    }

    @Override
    public JhinPicksRecord value6(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public JhinPicksRecord value7(String value) {
        setVod(value);
        return this;
    }

    @Override
    public JhinPicksRecord value8(Boolean value) {
        setNotified(value);
        return this;
    }

    @Override
    public JhinPicksRecord values(String value1, String value2, String value3, String value4, Boolean value5, LocalDateTime value6, String value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JhinPicksRecord
     */
    public JhinPicksRecord() {
        super(JhinPicks.JHIN_PICKS);
    }

    /**
     * Create a detached, initialised JhinPicksRecord
     */
    public JhinPicksRecord(String gameId, String messageId, String player, String tournament, Boolean won, LocalDateTime timestamp, String vod, Boolean notified) {
        super(JhinPicks.JHIN_PICKS);

        setGameId(gameId);
        setMessageId(messageId);
        setPlayer(player);
        setTournament(tournament);
        setWon(won);
        setTimestamp(timestamp);
        setVod(vod);
        setNotified(notified);
        resetChangedOnNotNull();
    }
}
