/*
 * This file is generated by jOOQ.
 */
package com.logankulinski.jooq.tables;


import com.logankulinski.jooq.Keys;
import com.logankulinski.jooq.Public;
import com.logankulinski.jooq.tables.records.LucianPicksRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LucianPicks extends TableImpl<LucianPicksRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lucian_picks</code>
     */
    public static final LucianPicks LUCIAN_PICKS = new LucianPicks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LucianPicksRecord> getRecordType() {
        return LucianPicksRecord.class;
    }

    /**
     * The column <code>public.lucian_picks.game_id</code>.
     */
    public final TableField<LucianPicksRecord, String> GAME_ID = createField(DSL.name("game_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.lucian_picks.message_id</code>.
     */
    public final TableField<LucianPicksRecord, String> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.lucian_picks.player</code>.
     */
    public final TableField<LucianPicksRecord, String> PLAYER = createField(DSL.name("player"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.lucian_picks.tournament</code>.
     */
    public final TableField<LucianPicksRecord, String> TOURNAMENT = createField(DSL.name("tournament"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.lucian_picks.won</code>.
     */
    public final TableField<LucianPicksRecord, Boolean> WON = createField(DSL.name("won"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.lucian_picks.timestamp</code>.
     */
    public final TableField<LucianPicksRecord, OffsetDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.lucian_picks.vod</code>.
     */
    public final TableField<LucianPicksRecord, String> VOD = createField(DSL.name("vod"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.lucian_picks.notified</code>.
     */
    public final TableField<LucianPicksRecord, Boolean> NOTIFIED = createField(DSL.name("notified"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private LucianPicks(Name alias, Table<LucianPicksRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LucianPicks(Name alias, Table<LucianPicksRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.lucian_picks</code> table reference
     */
    public LucianPicks(String alias) {
        this(DSL.name(alias), LUCIAN_PICKS);
    }

    /**
     * Create an aliased <code>public.lucian_picks</code> table reference
     */
    public LucianPicks(Name alias) {
        this(alias, LUCIAN_PICKS);
    }

    /**
     * Create a <code>public.lucian_picks</code> table reference
     */
    public LucianPicks() {
        this(DSL.name("lucian_picks"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LucianPicksRecord> getPrimaryKey() {
        return Keys.LUCIAN_PICKS_PKEY;
    }

    @Override
    public LucianPicks as(String alias) {
        return new LucianPicks(DSL.name(alias), this);
    }

    @Override
    public LucianPicks as(Name alias) {
        return new LucianPicks(alias, this);
    }

    @Override
    public LucianPicks as(Table<?> alias) {
        return new LucianPicks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LucianPicks rename(String name) {
        return new LucianPicks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LucianPicks rename(Name name) {
        return new LucianPicks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LucianPicks rename(Table<?> name) {
        return new LucianPicks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LucianPicks where(Condition condition) {
        return new LucianPicks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LucianPicks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LucianPicks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LucianPicks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LucianPicks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LucianPicks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LucianPicks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public LucianPicks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LucianPicks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public LucianPicks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
